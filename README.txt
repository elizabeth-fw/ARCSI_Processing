Scripts for automated atmospheric correction of Landsat and Sentinel images utilizing The Atmospheric and Radiometric Correction of Satellite Imagery (ARCSI) software, running within a docker container for compatibility across systems. Scripts are currently configured for processing imagery covering Aotea (Great Barrier Island), but could be configured for any location provided the necessary data (region Digital Elevation Model (DEM) and Area of Interest (AOI) files) is available and in the correct format described below. Script features include clipping images to an AOI, customizable atmospheric correction with ARCSI, translation of ARCSI products (.kea) to GeoTIFF format, and corrected image organization/analysis. Any questions or contribution suggestions can be emailed to me, Josh Powell (powel4jw@dukes.jmu.edu or jppowell0408@gmail.com). 
________________


Processing Operation
Docker Image: https://hub.docker.com/r/bcol845/arcsi | docker pull bcol845/arcsi
Explanation of ARCSI processing commands: https://groups.google.com/g/rsgislib-support/c/CQ_S4BRuE3Y
ARCSI documentation: http://remotesensing.info/arcsi/
Auckland DEM: https://data.linz.govt.nz/layer/106410-auckland-north-lidar-1m-dem-2016-2018/
* Data structure for the RAW Landsat and Sentinel data must be in the correct format for full automation of processing to function properly. The scripts were developed with data that was sorted into separate directories by year. The first script executed in Landsat and Sentinel processing reflects this. For Landsat the zipped (.tar) files must be within one subfolder in the RAW directory (RAW/date/landsat_file.tar). For Sentinel the .SAFE files must be within two subfolders in the RAW directory (RAW/date/sentinel_file/sentinel_file.SAFE). 
* Landsat and Sentinel data processing is fully automated, all running within the container. After downloading Docker Desktop and pulling the container, the container is initialized from the command line with the Landsat or Sentinel data loaded as a volume. This data directory must be formatted correctly for the processing scripts to work correctly. The Landsat or Sentinel directories must contain 3 folders labeled; RAW, Data, Scripts. RAW contains all of the data to be processed. Data contains the Landsat or Sentinel aoi file for clipping and the DEM used for processing named aotea_dem.tif. Scripts contain all of the Python scripts used to automate the processing of the images. Each script controls a different processing function with the script process.py calling to all scripts to automate processing. The processing flow consists of 3 steps; preprocessing, atmospheric correction, and post-processing. 
* Preprocessing prepares the Landsat or Sentinel data for ARCSI atmospheric correction by extracting the data from the RAW folder, clipping it to the aoi, and placing it into a created directory named Inputs. 
* Atmospheric correction is controlled with the build_batch.py script, which constructs and executes the ARCSI batch-processing command. It creates the tmp directory used by ARCSI during processing and the Outputs folder where the corrected data is placed. The build_batch.py script contains a section labeled parameters with a section labeled Processing options. Editing these changes the commands used in ARCSI processing. The rest of the parameters are also defined in this section, allowing for further command customization. The section labeled Batch command run sequence executes the constructed batch processing command. It also contains the command that allocates processing power to ARCSI. The script automatically detects available processing power (labeled cpu_count) and allocation can be changed by editing the cores variable. 
* Postprocessing performs several operations on the atmospherically corrected data. First, the tmp and Inputs directories are removed as they are no longer needed. Then each file in the Outputs folder is scanned to check if processing was successful, and bad data is removed (correctly processed data has 5 files in its folder, folders with more or less than 5 files did not process correctly due to issues with the RAW data and are removed. NOTE: This number depends on the amount of outputs expected from ARCSI. batch_parameters is currently set to output 5 files. The check_data.py script must be edited to represent the correct amount of expected files if ARCSI “keepfileends” is changed). The data is then converted into GeoTIFF files for use in mapping and the .kea files are removed. The data is then sorted into folders by year.
* When processing is complete, the Landsat or Sentinel directory will contain folders RAW, Data, Scripts, Outputs. The atmospherically corrected GeoTIFF files are sorted by year in the Outputs folder. 
________________


Script Explanation
* dem_merge.py: To utilize a DEM for ARCSI processing, it must be a single file. Downloading the 1-meter DEM from the links above results in a folder containing many GeoTIFF files that make up the entire DEM. This script uses gdal to merge the GeoTIFF files into a single GeoTIFF file for use in ARCSI. The script is configured for the GeoTIFF format, but can be converted to utilize any gdal compatible format ex; .kea. To prevent exceeding the command character limit, a list containing all .tif files is placed into a temporary file. The temporary file is removed upon the script’s completion. 3 directories need to be specified for the script to run; input_directory is the directory containing the downloaded DEM files, output_directory is where the merged DEM file will be placed, and merged_filename is the name of the merged DEM.
* extract.py: This is a Landsat-specific command used in preparing the images for processing, to account for the file structure of the Landsat images. The script looks in an input directory (RAW), the subfolders organizing the Landsat images by year, then applies the arcsiextractdata.py command to the subfolder extracting all Landsat data to an output directory (tmp). It specifically looks for the .tar zipped files within the input directory. 
* aoi_clip.py: This script clips Landsat and Sentinel image data to a specified geographic region. This allows for a specific area of interest to be specified for processing. This inspires only data of interest to the user will be processed, reducing processing times and storage. Due to the file differing structure of Landsat and Sentinel data, the scripts work differently for the respective data source. The library imports and clip_raster functions are the same between the two scripts as these are universal. This uses rasterio to clip an input file to a shapefile and creates a clipped GeoTIFF file. Landsat then uses the batch_clip function to apply the clip_raster function to all .TIF files in the extracted Landsat folders in an input directory (tmp), and places the clipped Landsat files in an output directory (Inputs). Sentinel data has a more complex file structure than Landsat so the Sentinel clipping script must properly navigate through this file structure to find the proper files to clip. The process_safe_folders function first finds the .SAFE files in their sorted year directories (RAW), then sorts through the .SAFE file directory to find the image data .jp2 files and clips the images with the clip_raster function. The clipped files and the rest of their respective data in the .SAFE files are then copied to an output directory (Inputs). 
* directory_clear.py: This script is used to clear the data in or entirely remove a directory. The clear_directory function leaves the directory clearing everything within, while the remove_directory removes a directory and all contents. This is used in processing to remove unnecessary data or products generated in processing. 
* build_batch.py: This script controls ARCSI processing. Further description is included in the Processing Operation section of the documentation, and ARCSI documentation.
* check_data.py: This script checks the processed data after ARCSI processing (Outputs directory) for correctly processed data. If the RAW data is unusable (completely covered by clouds, improper georeference, image corruption, etc.), ARCSI will not generate the selected products. This script checks the processed data folders for the correct amount of expected products and removes the folders that do not contain the expected products. As explained in Processing Operation the expected number of products generated must reflect the amount created by ARCSI, else the correctly processed data folders will be removed. 
* translate.py: This script is used to translate the .kea files created by ARCSI to GeoTIFF using gdal. The convert_kea_to_geotiff function does this, converting the .kea files in the processed data folders within an input directory (Outputs) to GeoTIFF. The remove_kea_files function then removes the .kea files to clean the folder. The postprocess function calls both functions, simplifying operation. 
* file_sort.py: This Script examines the processed data folders to find the year the image was taken found in the folder name, creates the folders corresponding to the year, and moves all data folders into their respective year folder. This organizes the data to aid analysis. The year is found by identifying a pattern in the image folder name with the Python re library matching the first 4 numbers preceded by an _, reflecting ARCSI’s data naming scheme for Landsat and Sentinel data. 
* process.py: This script calls to the above scripts to fully automate processing. A description is included in the script comments.